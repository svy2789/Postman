{
	"info": {
		"_postman_id": "5f4f492e-2222-44d6-97d9-9a0737385270",
		"name": "HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "HW2",
			"item": [
				{
					"name": "first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Проверить, что в body приходит правильный string.\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/first",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"first"
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Спарсить response body в json.\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
									"pm.test(\"Your test name\", function () {\r",
									"    pm.expect(jsonData.name).to.eql('Slava');\r",
									"});\r",
									"\r",
									"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
									"pm.test(\"Your test age\", function () {\r",
									"    pm.expect(jsonData.age).to.eql('32');\r",
									"});\r",
									"\r",
									"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
									"pm.test(\"Your test salary\", function () {\r",
									"    pm.expect(jsonData.salary).to.eql(1000);\r",
									"});\r",
									"\r",
									"//Спарсить request.\r",
									"let req = request.data;\r",
									"\r",
									"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"Your test name\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(req.name);\r",
									"});\r",
									"\r",
									"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"pm.test(\"Your test age\", function () {\r",
									"    pm.expect(jsonData.age).to.eql(req.age);\r",
									"});\r",
									"\r",
									"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"pm.test(\"Your test salary\", function () {\r",
									"    pm.expect(jsonData.salary).to.eql(+req.salary);\r",
									"});\r",
									"\r",
									"//Вывести в консоль параметр family из response.\r",
									"let family = jsonData.family\r",
									"console.log('family = ' , family)\r",
									"\r",
									"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
									"pm.test(\"u_salary_1_5_year = salary*4\", function () {\r",
									"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req.salary*4);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Slava",
									"type": "text"
								},
								{
									"key": "age",
									"value": "32",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_3",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Спарсить response body в json.\r",
									"let jsonData = pm.response.json()\r",
									"\r",
									"//Спарсить request.\r",
									"let req = pm.request.url.query.toObject()\r",
									"\r",
									"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"Your test name\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(req.name);\r",
									"});\r",
									"\r",
									"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"pm.test(\"Your test age\", function () {\r",
									"    pm.expect(jsonData.age).to.eql(req.age);\r",
									"});\r",
									"\r",
									"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"pm.test(\"Your test salary\", function () {\r",
									"    pm.expect(jsonData.salary).to.eql(+req.salary);\r",
									"});\r",
									"\r",
									"//Вывести в консоль параметр family из response.\r",
									"console.log('family = ' , jsonData.family)\r",
									"\r",
									"//Проверить, что у параметра dog есть параметры name.\r",
									"pm.test(\"Your test dog.name\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog).to.have.property('name');\r",
									"});\r",
									"\r",
									"//Проверить, что у параметра dog есть параметры age.\r",
									"pm.test(\"Your test dog.age\", function () {\r",
									"    pm.expect(pm.response.json('dog')).to.have.property('age');\r",
									"});\r",
									"\r",
									"//Проверить, что параметр name имеет значение Luky.\r",
									"pm.test(\"Your test dog.name = Luky\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog.name).to.eql('Luky');\r",
									"});\r",
									"\r",
									"//Проверить, что параметр age имеет значение 4.\r",
									"pm.test(\"Your test dog.age = 4\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_3?name=Slava&age=32&salary=1000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Slava"
								},
								{
									"key": "age",
									"value": "32"
								},
								{
									"key": "salary",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Спарсить response body в json.\r",
									"let jsonData = pm.response.json()\r",
									"\r",
									"//Спарсить request.\r",
									"let req = pm.request.url.query.toObject()\r",
									"\r",
									"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"Your test name\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(req.name);\r",
									"});\r",
									"\r",
									"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
									"pm.test(\"Your test age\", function () {\r",
									"    pm.expect(jsonData.age).to.eql(+req.age);\r",
									"});\r",
									"\r",
									"//Вывести в консоль параметр salary из request.\r",
									"console.log(\"salary request = \" , req.salary)\r",
									"\r",
									"//Вывести в консоль параметр salary из response.\r",
									"console.log('salary response = ' , jsonData.salary)\r",
									"\r",
									"//Вывести в консоль 0-й элемент параметра salary из response.\r",
									"console.log('salary response [0] = ' , jsonData.salary[0])\r",
									"\r",
									"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
									"console.log('salary response [1] = ' , jsonData.salary[1])\r",
									"\r",
									"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
									"console.log('salary response [2] = ' , jsonData.salary[2])\r",
									"\r",
									"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
									"pm.test('salary[0] = salary request', function () {\r",
									"    pm.expect(jsonData.salary[0]).to.eql(+req.salary);\r",
									"});\r",
									"\r",
									"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
									"pm.test('salary[1] = salary request', function () {\r",
									"    pm.expect(+jsonData.salary[1]).to.eql(req.salary*2);\r",
									"});\r",
									"\r",
									"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
									"pm.test('salary[2] = salary request', function () {\r",
									"    pm.expect(+jsonData.salary[2]).to.eql(req.salary*3);\r",
									"});\r",
									"\r",
									"// Передать в окружение переменные name, age, salary\r",
									"pm.environment.set(\"name\", req.name);\r",
									"pm.environment.set(\"age\", req.age);\r",
									"pm.environment.set(\"salary\", req.salary);\r",
									"\r",
									"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
									"for (i=0; i < jsonData.salary[i]; i++)\r",
									"console.log('salary',i,'=',jsonData.salary[i])"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_4?name=Slava&age=32&salary=1000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Slava"
								},
								{
									"key": "age",
									"value": "32"
								},
								{
									"key": "salary",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Спарсить response body в json.\r",
									"let jsonData = pm.response.json()\r",
									"\r",
									"//Спарсить request.\r",
									"let req = request.data\r",
									"\r",
									"//Проверить, что json response имеет параметр start_qa_salary\r",
									"pm.test(\"check start_qa_salary\", function () {\r",
									"    pm.expect(jsonData).to.have.property('start_qa_salary');\r",
									"});\r",
									"\r",
									"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
									"pm.test(\"check qa_salary_after_6_months\", function () {\r",
									"    pm.expect(jsonData).to.have.property('qa_salary_after_6_months');\r",
									"});\r",
									"\r",
									"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
									"pm.test(\"check qa_salary_after_12_months\", function () {\r",
									"    pm.expect(jsonData).to.have.property('qa_salary_after_12_months');\r",
									"});\r",
									"\r",
									"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
									"pm.test(\"check qa_salary_after_1.5_year\", function () {\r",
									"    pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year');\r",
									"});\r",
									"\r",
									"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
									"pm.test(\"check qa_salary_after_3.5_years\", function () {\r",
									"    pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years');\r",
									"});\r",
									"\r",
									"//Проверить, что json response имеет параметр person\r",
									"pm.test(\"check person\", function () {\r",
									"    pm.expect(jsonData).to.have.property('person');\r",
									"});\r",
									"\r",
									"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
									"pm.test(\"check start_qa_salary = salary request\", function () {\r",
									"    pm.expect(jsonData.start_qa_salary).to.eql(+req.salary);\r",
									"});\r",
									"\r",
									"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
									"pm.test(\"check qa_salary_after_6_months = salary*2 request\", function () {\r",
									"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req.salary*2);\r",
									"});\r",
									"\r",
									"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
									"pm.test(\"check qa_salary_after_12_months = salary*2.7 request\", function () {\r",
									"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(req.salary*2.7);\r",
									"});\r",
									"\r",
									"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
									"pm.test(\"check qa_salary_after_1.5_year = salary*3.3 request\", function () {\r",
									"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(req.salary*3.3);\r",
									"});\r",
									"\r",
									"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
									"pm.test(\"check qa_salary_after_3.5_years = salary*3.8 request\", function () {\r",
									"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(req.salary*3.8);\r",
									"});\r",
									"\r",
									"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
									"pm.test(\"Check u_name[1] = salary request\", function () {\r",
									"    pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary);\r",
									"});\r",
									"\r",
									"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
									"pm.test(\"Check u_age = age request\", function () {\r",
									"    pm.expect(jsonData.person.u_age).to.eql(+req.age);\r",
									"});\r",
									"\r",
									"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
									"pm.test(\"Check u_salary_5_years = salary*4.2 request\", function () {\r",
									"    pm.expect(jsonData.person.u_salary_5_years).to.eql(req.salary*4.2);\r",
									"});\r",
									"\r",
									"//Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
									"for (let i in jsonData.person)\r",
									"console.log(i)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_2",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}